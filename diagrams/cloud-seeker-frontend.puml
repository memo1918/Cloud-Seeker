@startuml Cloud_Seeker_Frontend
!include <C4/C4_Container>

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/angular.puml
!include DEVICONS/nodejs.puml
!include DEVICONS/mongodb.puml
!include FONTAWESOME/users.puml

title Cloud-Seeker-Frontend


Person(user, "Customer", "People that want to compare cloud prices", $sprite="users")

Boundary(spa, "Cloud-Seeker SPA") {

Container(api_service, "Cloud-Seeker API", "angular service", "Provides data to the frontend")
'Done
'Container(app_component, "App Component", "angular component", "Root component of the application")
'Done
Container(print_service, "Print Service", "angular service", "Provides printing functionality")
Container(routing_service, "Routing Service", "angular service", "Provides routing functionality to change a page")
Container(shopping_cart_service, "Shopping Cart Service", "angular service", "Provides functionality to add and remove items from the shopping cart")
Container(storage_service, "Storage Service", "angular service", "Provides functionality to store and retrieve data from the local storage")
Container(filter_service, "Filter Service", "angular service", "Provides functionality to configure the filtering parameter")
Container(category_service, "Category Service", "angular service", "Provides functionality to select a category")
'Container(header_service, "Header Service", "angular service", "Provides functionality to display the header and opening the cart flyout")
Container(instance_preview_service, "Instance Preview Service", "angular service", "Provides functionality to display the instance preview and apply new filters")
Container(pricing_class, "Pricing service", "angular service", "Parses pricing units and conversion between those.")
Container(category_component, "Category selection", "angular component", "Displays available service categories")
Container(comparison_component, "Comparison Component", "angular component", "Displays the comparison of the selected instances in a shopping cart like way")
Container(header_component, "Header", "angular component", "Displays the header of the application")
Container(instance_preview_component, "Instance Preview Component", "angular component", "Displays the preview of all instances of the current category with applied filters")
Container(preview_panel_component, "Preview Panel", "angular component", "Displays the slide-out shopping cart")

Boundary(filter, "Filter"){
    Container(regulator_component, "Selection Components", "angular component", "Provides functionality to select a value from a dropdown or number selection")
    Container(tags_component, "Tags Component", "angular component", "Provides functionality to display and clear selected filters as tags")
    Container(filter_component, "Filter Component", "angular component", "Displays different filters for selecting the desired service instance")
}

Boundary(instance_configuration, "Instance Configuration"){
    Container(instance_configuration_component, "Instance Configuration Component", "angular component", "Displays the configuration of the selected instance as material ui dialog content")
    Container(instance_configuration_dialog, "Dialog", "angular component", "Provides functionality to open a configuration dialog for a instance by clicking a button")
    Container(field_component, "Field Component", "angular component", "Provides functionality to display a field of the configuration dialog")
}
}



Container_Ext(api, "API", "Node.js", "Regularly updates pricing and category information/serve data to the user", $sprite="nodejs")

Rel(api_service, api, "Queries data from the API")

Rel(shopping_cart_service, api_service, "Queries saved configuration details from the API")
Rel(category_service, api_service, "Queries available categories from the API")
Rel(instance_preview_service, api_service, "Queries available instances by from the API")
Rel(instance_preview_service, category_service, "Shows from current category")

'Rel(app_component, routing_service, "Subscribes and invokes route changes")

Rel_R(user, comparison_component, "selects instances")
Rel(user, preview_panel_component, "display overview of selected instances")
Rel(user, category_component, "select category")
Rel(user, instance_configuration_component, "configure instance")
Rel_R(user, filter_component, "filter by instance properties")
Rel(user, instance_preview_component, "select instance")

Rel(instance_configuration_dialog, instance_configuration_component, "Hosts configuration dialog")
Rel(instance_configuration_component, pricing_class, "Parses units")
Rel(instance_configuration_component, field_component, "Display fields according to pricing model")

Rel(comparison_component, print_service, "Triggers print events")

Rel(preview_panel_component, routing_service, "set to comparison page")
Rel(header_component, preview_panel_component, "opens")

Rel(filter_component, filter_service, "Subscribes and triggers filter changes")
Rel(filter_component, regulator_component, "uses regulator components to display and update filters")

Rel(tags_component, filter_service, "Subscribes to filter changes")
Rel(instance_preview_service, filter_service, "Subscribes to filter changes to update the preview")

Rel(instance_preview_component, instance_preview_service, "Subscribes to preview changes")
Rel(instance_preview_component, instance_configuration_dialog, "Opens configuration dialog")

Rel(shopping_cart_service, storage_service, "Stores and loads configuration")
Rel_Back(comparison_component, shopping_cart_service, "Provides user configuration")
Rel(comparison_component, routing_service, "Triggers route change")

Rel_L(instance_configuration_component, shopping_cart_service, "Adds instance configuration")

Rel(category_component, category_service, "Subscribes and triggers category changes")



@enduml